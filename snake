<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #000;
        }
        canvas {
            background-color: #000;
            border: 1px solid #fff;
        }
        button {
            margin-top: 10px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="400" height="400"></canvas>
    <button id="restartButton" style="display: none;">Restart</button>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const restartButton = document.getElementById('restartButton');

        const box = 20;
        const canvasSize = 400;
        const canvasBox = canvasSize / box;
        let snake, food, enemies, direction, score, game;

        function init() {
            snake = [{ x: box * 5, y: box * 5 }];
            food = {
                x: Math.floor(Math.random() * canvasBox) * box,
                y: Math.floor(Math.random() * canvasBox) * box,
            };
            enemies = [
                {
                    x: Math.floor(Math.random() * canvasBox) * box,
                    y: Math.floor(Math.random() * canvasBox) * box,
                }
            ];
            direction = 'RIGHT';
            score = 0;
            restartButton.style.display = 'none';
            document.addEventListener('keydown', directionControl);
            game = setInterval(draw, 100);
        }

        function directionControl(event) {
            if (event.keyCode === 37 && direction !== 'RIGHT') {
                direction = 'LEFT';
            } else if (event.keyCode === 38 && direction !== 'DOWN') {
                direction = 'UP';
            } else if (event.keyCode === 39 && direction !== 'LEFT') {
                direction = 'RIGHT';
            } else if (event.keyCode === 40 && direction !== 'UP') {
                direction = 'DOWN';
            }
        }

        function collision(head, array) {
            for (let i = 0; i < array.length; i++) {
                if (head.x === array[i].x && head.y === array[i].y) {
                    return true;
                }
            }
            return false;
        }

        function draw() {
            ctx.clearRect(0, 0, canvasSize, canvasSize);

            for (let i = 0; i < snake.length; i++) {
                ctx.fillStyle = (i === 0) ? 'green' : 'white';
                ctx.fillRect(snake[i].x, snake[i].y, box, box);
                ctx.strokeStyle = 'red';
                ctx.strokeRect(snake[i].x, snake[i].y, box, box);
            }

            ctx.fillStyle = 'red';
            ctx.fillRect(food.x, food.y, box, box);

            for (let i = 0; i < enemies.length; i++) {
                ctx.fillStyle = 'blue';
                ctx.fillRect(enemies[i].x, enemies[i].y, box, box);
            }

            let snakeX = snake[0].x;
            let snakeY = snake[0].y;

            if (direction === 'LEFT') snakeX -= box;
            if (direction === 'UP') snakeY -= box;
            if (direction === 'RIGHT') snakeX += box;
            if (direction === 'DOWN') snakeY += box;

            if (snakeX === food.x && snakeY === food.y) {
                score++;
                food = {
                    x: Math.floor(Math.random() * canvasBox) * box,
                    y: Math.floor(Math.random() * canvasBox) * box,
                };
                enemies.push({
                    x: Math.floor(Math.random() * canvasBox) * box,
                    y: Math.floor(Math.random() * canvasBox) * box,
                });
            } else {
                snake.pop();
            }

            let newHead = { x: snakeX, y: snakeY };

            if (snakeX < 0 || snakeY < 0 || snakeX >= canvasSize || snakeY >= canvasSize || collision(newHead, snake) || collision(newHead, enemies)) {
                clearInterval(game);
                restartButton.style.display = 'block';
                return;
            }

            snake.unshift(newHead);
            

            ctx.fillStyle = 'white';
            ctx.font = '45px Changa one';
            ctx.fillText(score, 2 * box, 1.6 * box);
        }

        restartButton.addEventListener('click', () => {
            init();
        });

        init();
    </script>
</body>
</html>
